[project]
name = "iu-alumni-backend"
version = "1.0.0"
description = "IU Alumni Platform Backend"
requires-python = ">=3.11"

[tool.ruff]
# Set the Python version
target-version = "py311"

# Set line length to match Black's default
line-length = 88

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "alembic/versions",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), isort (`I`), and more
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules for practical development
ignore = [
    # Documentation - focus on public APIs only
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class - too verbose for internal classes
    "D102",  # Missing docstring in public method - too verbose for simple methods
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D200",  # One-line docstring should fit on one line - formatter handles this
    "D203",  # 1 blank line required before class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "D415",  # First line should end with a period - too pedantic

    # FastAPI patterns - these are normal and expected
    "B008",  # Do not perform function call in argument defaults - FastAPI uses Depends()

    # Practical code patterns
    "E501",  # Line too long (let formatter handle this)
    "E711",  # Comparison to None should be is/is not - allow == None for SQLAlchemy
    "E712",  # Avoid equality comparisons to True/False - allow explicit comparisons
    "ARG001", # Unused function argument - common in FastAPI for auth/db dependencies
    "RET504", # Unnecessary assignment before return - sometimes improves readability

    # Timezone issues - can be addressed later if needed
    "DTZ003", # datetime.utcnow() used - requires larger refactor
    "DTZ005", # datetime.now() without tz - requires larger refactor

    # Naming conventions - be more lenient
    "N805",  # First argument of a method should be named `self` - pydantic uses `cls`
    "N806",  # Variable in function should be lowercase - sometimes uppercase is clearer

    # Exception handling - too strict for practical development
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
]

# Allow autofix for all enabled rules
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
# Ignore import violations in __init__.py files
"__init__.py" = ["F401", "D104"]
# Ignore missing docstrings in tests
"tests/*" = ["D"]
# Ignore missing docstrings in migrations
"alembic/versions/*" = ["D"]
# Ignore unused imports in alembic env.py (required by framework)
"alembic/env.py" = ["F401"]
# Utility directories - more lenient
"front/*" = ["T201", "PD901", "D"]  # Allow prints, generic names, no docstrings
"scripts/*" = ["T201", "PD901", "D", "N806"]  # Same for scripts, allow uppercase vars
# Models - don't require docstrings for simple data classes
"app/models/*" = ["D"]
# Schemas - don't require docstrings for simple data classes
"app/schemas/*" = ["D"]

[tool.ruff.lint.isort]
# Combine imports from the same module
combine-as-imports = true
# Force imports to be sorted alphabetically within sections
force-sort-within-sections = true
# Add one line after imports
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Format docstrings
docstring-code-format = true
